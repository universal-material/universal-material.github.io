{"version":3,"file":"checkbox.js","sourceRoot":"","sources":["../../src/checkbox/checkbox.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAE,GAAG,EAAE,IAAI,EAAsB,UAAU,EAAE,MAAM,KAAK,CAAC;AAChE,OAAO,EAAE,aAAa,EAAE,KAAK,EAAE,qBAAqB,EAAE,MAAM,mBAAmB,CAAC;AAGhF,OAAO,EAAE,MAAM,IAAI,UAAU,EAAE,MAAM,uBAAuB,CAAC;AAGtD,IAAM,QAAQ,GAAd,MAAM,QAAS,SAAQ,UAAU;IAAjC;;QA0DG,sBAAiB,GAAG,CAAC,CAAa,EAAE,EAAE;YAC5C,IAAI,IAAI,CAAC,KAAK,KAAK,QAAQ,CAAC,gBAAgB,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC;gBACnE,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE,CAAC;YAC7B,CAAC;QACH,CAAC,CAAC;IACJ,CAAC;IA1BU,MAAM;QACb,OAAO,IAAI,CAAA;;uCAEwB,IAAI,CAAC,gBAAgB;aAC/C,CAAC;IACZ,CAAC;IAEO,gBAAgB;QACtB,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;QAE1B,IAAI,IAAI,CAAC,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,KAAK,CAAC,mBAAmB,CAAC,OAAO,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAClE,CAAC;QAED,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;QAEpC,IAAI,IAAI,CAAC,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,OAAO,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAC/D,CAAC;IACH,CAAC;;AAvDe,eAAM,GAAG;IACvB,UAAU;IACV,GAAG,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;KAyBF;CACF,AA5BqB,CA4BpB;AAEkC;IAAnC,KAAK,CAAC,UAAU,CAAC;wCAAkC;AAEnC;IADhB,qBAAqB,CAAC,EAAC,QAAQ,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAC,CAAC;gDACL;AAjC1C,QAAQ;IADpB,aAAa,CAAC,YAAY,CAAC;GACf,QAAQ,CA+DpB","sourcesContent":["import { css, html, HTMLTemplateResult, LitElement } from 'lit';\nimport { customElement, query, queryAssignedElements } from 'lit/decorators.js';\n\nimport { Ripple } from '../ripple/ripple';\nimport { styles as baseStyles } from '../shared/base.styles';\n\n@customElement('u-checkbox')\nexport class Checkbox extends LitElement {\n  static override styles = [\n    baseStyles,\n    css`\n      :host {\n        position: relative;\n        display: inline-flex;\n        justify-content: center;\n        align-items: center;\n        width: 48px;\n        height: 48px;\n      }\n      \n      ::slotted(input) {\n        position: relative;\n        padding: 0;\n        margin: 0;\n        aspect-ratio: 1;\n        height: 100%;\n        z-index: 1;\n        appearance: none;\n      }\n      \n      .touch {\n        position: absolute;\n        inset: 0;\n        border-radius: 9999px;\n      }\n    `\n  ];\n\n  @query('u-ripple') private readonly ripple!: Ripple;\n  @queryAssignedElements({selector: 'input', flatten: true})\n  private readonly assignedInputs!: HTMLInputElement[];\n\n  private input: HTMLInputElement | undefined;\n\n  override render(): HTMLTemplateResult {\n    return html`\n      <div class=\"touch\">\n        <u-ripple><slot @slotchange=\"${this.handleSlotChange}\"></slot></u-ripple>\n      </div>`;\n  }\n\n  private handleSlotChange(): void {\n    console.log('slotchange');\n\n    if (this.input) {\n      this.input.removeEventListener('click', this.handleInputChange);\n    }\n\n    this.input = this.assignedInputs[0];\n\n    if (this.input) {\n      this.input.addEventListener('click', this.handleInputChange);\n    }\n  }\n\n  private handleInputChange = (e: MouseEvent) => {\n    if (this.input !== document.elementFromPoint(e.clientX, e.clientY)) {\n      this.ripple.createRipple();\n    }\n  };\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'u-checkbox': Checkbox;\n  }\n}\n"]}